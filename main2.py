# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç v.004
import telebot  # pyTelegramBotAPI 4.3.1
from telebot import types
import botGames
import menuBot
from menuBot import Menu
import requests
import bs4
from mg import get_map_cell
import DZ
import cats

import music




bot = telebot.TeleBot('5207343139:AAH41gyhjwZMb97KtPFQ2hMk8Fo_5EFfgvY')

# -----------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands="start")
def command(message):
    chat_id = message.chat.id
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAI6OmKCdeW-deMX2A9_sm3va2byLCVlAAJ9GAACHB05SpAfprNoMQNzJAQ")
    txt_message = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ Python"
    bot.send_message(chat_id, text=txt_message, reply_markup=Menu.getMenu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é").markup)


#@bot.message_handler(commands="play")
#def start_menu_2(message):
    #main_.start_menu(message)



# -----------------------------------------------------------------------

cols, rows = 8, 8
maps = {}

keyboard = telebot.types.InlineKeyboardMarkup()
keyboard.row(telebot.types.InlineKeyboardButton('‚á¶', callback_data='left'),
             telebot.types.InlineKeyboardButton('‚áß', callback_data='up'),
             telebot.types.InlineKeyboardButton('‚á©', callback_data='down'),
             telebot.types.InlineKeyboardButton('‚á®', callback_data='right'))

def get_map_str(map_cell, player):
    map_str = ""
    for y in range(rows * 2 - 1):
        for x in range(cols * 2 - 1):
            if map_cell[x + y * (cols * 2 - 1)]:
                map_str += "‚¨õ"
            elif (x, y) == player:
                map_str += "üçì"
            else:
                map_str += "‚¨ú"
        map_str += "\n"
    return map_str

@bot.message_handler(commands=['labirint'])
def play_message(message):
    map_cell = get_map_cell(cols, rows)

    user_data = {
        'map': map_cell,
        'x': 0,
        'y': 0
    }

    maps[message.chat.id] = user_data

    bot.send_message(message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard)


#@bot.callback_query_handler(func=lambda call: True)
#def call_back(call):
#    button_list[call.data](call)

@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
     user_data = maps[query.message.chat.id]
     new_x, new_y = user_data['x'], user_data['y']

     if query.data == 'left':
         new_x -= 1
     if query.data == 'right':
         new_x += 1
     if query.data == 'up':
         new_y -= 1
     if query.data == 'down':
         new_y += 1

     if new_x < 0 or new_x > 2 * cols - 2 or new_y < 0 or new_y > rows * 2 - 2:
         return None
     if user_data['map'][new_x + new_y * (cols * 2 - 1)]:
         return None

     user_data['x'], user_data['y'] = new_x, new_y

     if new_x == cols * 2 - 2 and new_y == rows * 2 - 2:
         bot.edit_message_text(chat_id=query.message.chat.id,
                               message_id=query.message.id,
                               text="–£—Ä–∞ —É—Ä–∞, –ø–æ–±–µ–¥–∞!")
         return None

     bot.edit_message_text(chat_id=query.message.chat.id,
                           message_id=query.message.id,
                           text=get_map_str(user_data['map'], (new_x, new_y)),
                           reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    chat_id = message.chat.id
    ms_text = message.text

    cur_user = menuBot.Users.getUser(chat_id)
    if cur_user is None:
        cur_user = menuBot.Users(chat_id, message.json["from"])


    # –ø—Ä–æ–≤–µ—Ä–∫–∞ = –º—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥–º–µ–Ω—é, –∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è
    subMenu = menuBot.goto_menu(bot, chat_id, ms_text)  # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é, –∏ –≤–æ–π—Ç–∏ –≤ –Ω–µ–≥–æ
    if subMenu is not None:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–∞–º–æ–≥–æ –º–µ–Ω—é. –ï—Å–ª–∏ –µ—Å—Ç—å - –≤—ã–ø–æ–ª–Ω–∏–º –Ω—É–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if subMenu.name == "–ò–≥—Ä–∞ –≤ 21":
            game21 = botGames.newGame(chat_id, botGames.Game21(jokers_enabled=True))  # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
            text_game = game21.get_cards(2)  # –ø—Ä–æ—Å–∏–º 2 –∫–∞—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            bot.send_media_group(chat_id, media=game21.mediaCards)  # –ø–æ–ª—É—á–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç
            bot.send_message(chat_id, text=text_game)

        elif subMenu.name == "–ò–≥—Ä–∞ –ö–ù–ë":
            gameRPS = botGames.newGame(chat_id, botGames.GameRPS())  # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
            bot.send_photo(chat_id, photo=gameRPS.url_picRules, caption=gameRPS.text_rules, parse_mode='HTML')

        return  # –º—ã –≤–æ—à–ª–∏ –≤ –ø–æ–¥–º–µ–Ω—é, –∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    cur_menu = Menu.getCurMenu(chat_id)
    if cur_menu is not None and ms_text in cur_menu.buttons:  # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ–Ω—é
        module = cur_menu.module

        if module != "":  # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –≤ –¥—Ä—É–≥–æ–º –º–æ–¥—É–ª–µ, –µ—Å–ª–∏ –¥–∞ - –≤—ã–∑–æ–≤–µ–º –µ–≥–æ (–ø—Ä–∏–Ω—Ü–∏–ø –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏)
            exec(module + ".get_text_messages(bot, cur_user, message)")

        if ms_text == "–ü–æ–º–æ—â—åüôè":
            send_help(bot, chat_id)

        elif ms_text == "–ü–æ–≥–æ–¥–∞üåß":
            bot.send_message(chat_id, text=pogoda(chat_id))

        elif ms_text == "–õ–∞–±–∏—Ä–∏–Ω—Ç":
            bot.send_message(chat_id, text="–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ: /labirint")


    else:  # ======================================= —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç
        bot.send_message(chat_id, text="–ú–Ω–µ –∂–∞–ª—å, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É: " + ms_text)
        menuBot.goto_menu(bot, chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


# -----------------------------------------------------------------------

# -----------------------------------------------------------------------
def send_help(bot, chat_id):
    bot.send_message(chat_id, "–ê–≤—Ç–æ—Ä: –ú–∞—à–∞ –ß–µ–±–æ—Ç–æ–∫")
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text = "–ö—Ç–æ –Ω–∞–ø–∏—à–µ—Ç, —Ç–æ—Ç –°–µ—Ä–≥–µ–π", url = "https://t.me/Chhebott")
    markup.add(btn1)
    img = open('–∫–æ—Ç.jpg', 'rb')

    bot.send_photo(chat_id, img, reply_markup=markup)

    bot.send_message(chat_id, "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Ç-–±–æ—Ç–∞:")
    for el in menuBot.Users.activeUsers:
        bot.send_message(chat_id, menuBot.Users.activeUsers[el].getUserHTML(), parse_mode='HTML')

def pogoda(chat_id):
    req = requests.get('https://pogoda.mail.ru/prognoz/sankt_peterburg/')
    html = bs4.BeautifulSoup(req.content, "html.parser")
    answer = str(html.select('.information__content__temperature'))
    temp = answer.split("/span>")
    temp2 = temp[1].strip()
    temp2 = temp2[0:3]
    st_temp = "–°–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ: " + temp2
    return st_temp





bot.polling(none_stop=True, interval=0)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
